
%option prefix="yy_alt_"

%{

#include "stdafx.h"
#include "geo_parse_types.h"
#include "geo_altitude_parser.tab.h"
#include <assert.h>

#if YYDEBUG
extern int yy_alt_debug;
#endif
extern int yy_alt_parse();

static int start_token;	// token used to select start symbol in grammar

%}

whitespace			[ \t\f\n\r]
digit				[0-9]
dot                 \.
integer				[+-]?{digit}+
real				[+-]?({digit}*{dot}{digit}+|{digit}+{dot}{digit}*)
degree				\xc2\xb0
unltd				[Uu][Nn][Ll][Tt][Dd]
unlimited			[Uu][Nn][Ll][Ii][Mm][Ii][Tt][Ee][Dd]
gnd                 [Gg][Nn][Dd]
sfc                 [Ss][Ff][Cc]
agl                 [Aa][Gg][Ll]
msl                 [Mm][Ss][Ll]
fl                  [Fl][Ll]
feet				[Fl][Ee][Ee][Tt]
meter				[Mm][Ee][Tt][Ee][Rr]

%%

%{

if (start_token) {
    int t = start_token;
    start_token = 0;
    return t;
}

%}

{integer}		{ return INTEGER; }
{real}			{ return REAL; }
{whitespace}    { /* skip */ }
{unltd}			{ return UNLIMITED; }
{unlimited}		{ return UNLIMITED; }
{gnd}			{ return GND; }
{sfc}			{ return GND; }
{agl}			{ return GND; }
{msl}			{ return MSL; }
{fl}			{ return FL; }
{feet}			{ return FEET; }
{meter}			{ return METER; }
.               { return *yytext; }

%%

int yywrap()
{
	return 1;
}

int parse_geo_altitude(const char* s)
{
#if YYDEBUG
	yy_alt_debug = 0;
#endif
	start_token = START_ALTITUDE;
	YY_BUFFER_STATE state = yy_scan_string(s);
	yy_switch_to_buffer(state);
	int result = yy_alt_parse();
	yy_delete_buffer(state);
	return result;
}

void geo_coordinate_test_altitude(const char* s)
{
	start_token = START_ALTITUDE;
	YY_BUFFER_STATE state = yy_scan_string(s);
	yy_switch_to_buffer(state);
	int result = yy_alt_parse();
	yy_delete_buffer(state);
	assert(result == 0);
}

void geo_altitude_test()
{
#if YYDEBUG
	yy_alt_debug = 1;
#endif
	geo_coordinate_test_altitude("2000 GND");
}
